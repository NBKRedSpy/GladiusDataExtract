@page
@using GladiusDataExtract.Entities;
@model GladiusStatWeb.Pages.UnitsModel



@* Debug*@
<p class="muted">Placeholder text to demonstrate some <a href="#" data-bs-toggle="tooltip" data-bs-title="Default tooltip">inline links</a> with tooltips. This is now just filler, no killer. Content placed here just to mimic the presence of <a href="#" data-bs-toggle="tooltip" data-bs-title="Another tooltip">real text</a>. And all that just to give you an idea of how tooltips would look when used in real-world situations. So hopefully you've now seen how <a href="#" data-bs-toggle="tooltip" data-bs-title="Another one here too">these tooltips on links</a> can work in practice, once you use them on <a href="#" data-bs-toggle="tooltip" data-bs-title="The last tip!">your own</a> site or project.</p>
@foreach (var unit in Model.Units)
{
	string htmlId = unit.Key.Replace("/", "-");

	<div class="unit-name" id="@htmlId"><a class="unit__name-link" href="#@htmlId">@unit.Name</a></div>
	<div class="unit__content">
		<div class="unit__item-content">
			<div>Model Count: @unit.ModelCount </div>
			<span>Armor @unit.Armor</span>
			<span>Hitpoints @unit.Hitpoints</span>
			<span>Movement @unit.Movement</span>

			@{ShowIfNotZero("BioMass", unit.ProductionResources.BioMass);}
			@{ShowIfNotZero("Energy", unit.ProductionResources.Energy);}
			@{ShowIfNotZero("Food", unit.ProductionResources.Food);}
			@{ShowIfNotZero("Influence", unit.ProductionResources.Influence);}
			@{ShowIfNotZero("Ore", unit.ProductionResources.Ore);}

		</div>

		<div class="unit__item-content">
			<div class="unit__header">Weapons</div>
			<div class="unit__item-content">
				@foreach (Weapon weapon in unit.Weapons)
				{
					<span class="unit__header" >@weapon.Name</span>

					<div class="unit__item-content-separate">
						<span>@{await DisplayIcon("Damage");} @weapon.Damage</span>
						<span>@{await DisplayIcon("Attacks");} @weapon.AttackCount</span>
						<span>@{await DisplayIcon("ArmorPenetration");} @weapon.ArmorPenetration</span>
						<span>@{await DisplayIcon("Accuracy");}@weapon.Accuracy</span>
						@if (weapon.RequiredUpgrade != "")
						{
							<div><span class="property-name">Unit Upgrade Requirement: </span>@weapon.RequiredUpgrade</div>
						}

						<div class="unit__header">Traits</div>
						<div class="unit__item-content">
						@foreach (var trait in weapon.Traits)
						{
							<div>@trait</div>
						}
						</div>
						@if (weapon.Requirements.Count > 0)
						{
							<div class="unit__header">Weapon Requirements</div>
							<div class="unit__item-content">

							@foreach(var requirement in weapon.Requirements)
								{
									<div><span>@requirement.Name</span>
										@if(requirement.RequiredUpgrade != requirement.Name){
											<span> -> @requirement.RequiredUpgrade</span> 
										}
									</div>
								}
							</div>
						}
					</div>
				}

				@if(unit.Traits.Count != 0)
				{
					<div class="unit__header">Traits</div>

					<div class="unit__item-content">

						@foreach (var trait in unit.Traits)
						{
							<div>@trait</div>	
						}
					</div>
				}

				@if (unit.Upgrades.Count != 0)
				{
					<div class="unit__header">Upgrades</div>

					<div class="unit__item-content">

						@foreach (var upgrade in unit.Upgrades)
						{
							<div>
								@upgrade.Name @(" -> " + upgrade.RequiredUpgrade)
							</div>
						}
					</div>
				}
			</div>

		</div>
	</div>

 
	void ShowIfNotZero(string name, decimal value)
	{
		if (value != 0)
		{
			<span>@name @value.ToString("#.##")</span>
		}
	}

	async Task DisplayIcon(string iconName)
	{
		<span class="icon-container">
			<img class="icon" data-bs-toggle="tooltip" data-bs-title="@iconName" src="~/img/@(iconName).png" )"></img>
		</span>
	}
}

@section Scripts {
<script type="text/javascript">
	const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
	const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

</script>
}
