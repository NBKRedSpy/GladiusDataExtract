@page "{Faction?}"

@using GladiusDataExtract.Entities;
@model GladiusStatWeb.Pages.UnitsModel

<script>
	function imageFallback()
	{
		this.onerror=null;
		this.src='@Url.Content("~/img/Missing.png")';
	}
</script>




@*Todo: Add the factions as the url part. Faction: @Model.Faction*@
<a href="~/Units/">All</a>

@foreach(var factionName in  Enum.GetNames(typeof(Faction)).Where(x=> x != "Invalid"))
{
	<a href="~/Units/@factionName">@factionName</a>

	
}


@foreach (var unit in Model.Units!)
{
	string htmlId = unit.Key.Replace("/", "-");

	<div class="unit-name" id="@htmlId"><a class="unit__name-link" href="#@htmlId">@unit.Name</a></div>
	<div class="unit__content">
		<div class="unit__item-content unit__icon-line">
			<span>@{await DisplayIcon("Attributes","PopulationLimit", "Model Count");} @unit.ModelCount </span>
			<span>@{await DisplayIcon("Attributes","Armor");} @unit.Armor</span>
			<span>@{await DisplayIcon("Attributes","HitPoints", "Hit Points");}@Model.HitPointsFormat(unit)</span>
			<span>@{await DisplayIcon("Attributes","Movement");}@unit.Movement</span>

			@{await ShowResourceIfNotZero("Attributes","BioMass", unit.ProductionResources.BioMass);}
			@{await ShowResourceIfNotZero("Attributes","Energy", unit.ProductionResources.Energy);}
			@{await ShowResourceIfNotZero("Attributes","Food", unit.ProductionResources.Food);}
			@{await ShowResourceIfNotZero("Attributes","Influence", unit.ProductionResources.Influence);}
			@{await ShowResourceIfNotZero("Attributes","Ore", unit.ProductionResources.Ore);}
			@{await ShowResourceIfNotZero("Attributes","Requisitions", unit.ProductionResources.Requisitions);}
		</div>

		<div class="unit__item-content">
			<div class="unit__icon-line">
				@{await ShowResourceIfNotZero("Attributes","BioMass", unit.UpkeepResources.BioMass);}
				@{await ShowResourceIfNotZero("Attributes","Energy", unit.UpkeepResources.Energy);}
				@{await ShowResourceIfNotZero("Attributes","Food", unit.UpkeepResources.Food);}
				@{await ShowResourceIfNotZero("Attributes","Influence", unit.UpkeepResources.Influence);}
				@{await ShowResourceIfNotZero("Attributes","Ore", unit.UpkeepResources.Ore);}
				@{await ShowResourceIfNotZero("Attributes", "Requisitions", unit.UpkeepResources.Requisitions);}
			</div>
		</div>

		@if (unit.Traits.Count != 0)
		{
			<div class="unit__item-content">
				<div class="unit__header">Traits</div>

				<div class="unit__item-content">
					<span class="unit__icon-line">
					@foreach (var trait in unit.Traits)
					{
						<span>@{await DisplayIcon("Traits", @trait);}
						</span>
					}
					</span>

					@*--- Traits created by upgrades *@
					@if(unit.Upgrades.Count > 0){
						<span class="unit__trait_upgrades unit__icon-line">

						@foreach (var upgrade in unit.Upgrades)
						{
							<span>@{await DisplayIcon("Traits", @upgrade.Name);}</span>
						}
						</span>
					}
				</div>
			</div>
		}

		<div class="unit__item-content">

			<div class="unit__header">Weapons</div>
			<div class="unit__item-content">
				@foreach (Weapon weapon in unit.Weapons)
				{
					<span class="unit__header" >@weapon.Name
					
					@if (weapon.RequiredUpgrade != "")
					{
						<span class="unit__icon-line unit__trait_upgrades">
							<span>@{await DisplayIcon("Traits", weapon.RequiredUpgrade);}</span>
						</span>
					}
					</span>

					<div class="unit__item-content-separate">
						<div class="unit__icon-line">
							<span>@{await DisplayIcon("Attributes","Damage");} @Model.WeaponDamageFormat(weapon, unit)</span>
							<span>@{await DisplayIcon("Attributes","Attacks");} @Model.AttackFormat(weapon, unit)</span>
							@if (@weapon.Range > 1)
							{
								<span>@{
										await DisplayIcon("Attributes", "Range");
									}@weapon.Range</span>
							}

							<span>@{await DisplayIcon("Attributes","ArmorPenetration");} @weapon.ArmorPenetration</span>
							<span>@{await DisplayIcon("Attributes","Accuracy");}@weapon.Accuracy</span>
						</div>


						<div class="unit__header">Traits</div>
						<div class="unit__item-content ">
							<span class="unit__icon-line">
								@foreach (var trait in weapon.Traits)
								{
									<span>@{await DisplayIcon("Traits",@trait);}</span>
								}
							</span>

							@if (weapon.Requirements.Count > 0)
							{

								@*todo: The trait upgrades requires parsing the traits.  There is sometimes an icon attrbiute with the name of the icon to show.
					For ex:  "Traits\AdeptusMechanicus\MeleeWeaponBonus.xml" has <trait icon="Traits/WeaponBonus">

					Traits descriptions:
					Data\Core\Languages\English\Traits.xml

					<entry name="AdeptusMechanicus/AssaultWeaponBonus" value="Dogma Metalica"/>
					<entry name="AdeptusMechanicus/AssaultWeaponBonusDescription" value="Increases the armour penetration."/>

					*@

								<span class="unit__icon-line unit__trait_upgrades">
									@foreach (var requirement in weapon.Requirements)
									{
										<span>@{
												await DisplayIcon("Traits", @requirement.Name, $"{requirement.Name} -> {requirement.RequiredUpgrade}");
											}</span>
									}
								</span>
							}
						</div>

					</div>
				}
			</div>

		</div>
	</div>


	async Task ShowResourceIfNotZero(string imgSubFolder,string iconName, decimal value, string text = "")
	{
		if (value != 0)
		{
			<span>@{
					await DisplayIcon(imgSubFolder,iconName);
				} @value.ToString("#.##")</span>
		}
	}

	/// <summary>
	/// Creates an img tag for an icon in the img folder
	/// </summary>
	/// <param name="imgSubFolder">The subfolder the icon will be in.  Eg: Attributes</param>
	/// <param name="iconName">The name of the icon.  Will be the key.
	/// ex:  Orks/WarpFrenzy  </param>
	/// <param name="text">The tool tip text to show when hovered.  Defaults to the icon name</param>
	/// <returns></returns>
	async Task DisplayIcon(string imgSubFolder, string iconName, string text = "")
	{
		string displayText = text == "" ? iconName : text;

		<span>
			<img onerror="imageFallback.call(this);" class="icon" data-bs-toggle="tooltip" data-bs-title="@displayText" src="~/img/@imgSubFolder/@(iconName).png" 
				)"></img>
		</span>
	}
}

@section Scripts {
<script type="text/javascript">
	//Init the bootstrap tooltips
	const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
	const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
</script>
}
