@page
@using GladiusDataExtract.Units;
@using GladiusDataExtract.Weapons;
@model GladiusStatWeb.Pages.UnitsModel



@*Debugging*@
@*@foreach (var unit in Model.Units.Where(x => x.Name == "HiveTyrant"))*@

@foreach (var unit in Model.Units.Where(x => x.Name == "Hormagaunt"))
{
	<div class="unit-name">@unit.Name</div>
	<div>
		<div class="stats-container">
		<div>Count: @unit.ModelCount </div>

		@foreach (UnitAttribute unitAttribute in Model.GetDisplayAttributes(unit))
		{
			<span>@unitAttribute.Name @unitAttribute.Value</span>
		}
		</div>
		<div class="weapons-container">
			@foreach (Weapon weapon in unit.Weapons)
			{

				<span class="weapon-name" >@weapon.Name</span>

				var stats = Model.GetWeaponStats(unit, weapon);

				foreach (var stat in stats)
				{
					//Attacks
					bool showModelCount = stat.Item1.EndsWith("ttacks") && stat.Item2 > 1;

					<div class="weapon-stats">@stat.Item1: @stat.Item2 @if (showModelCount)
						{
							@(" (x" + unit.ModelCount + ")")
						}
					</div>

					@*<div class="weapon-stats">@stat.Item1: @stat.Item2</div>*@
				}

				<div>Weapon Traits</div>
				@foreach (var trait in weapon.Traits)
				{
					<div>@trait</div>
				}
			}
		</div>

		@if(unit.Traits.Count != 0)
		{
			<div class="traits-container">
				Traits

				@foreach (var trait in unit.Traits)
				{
					<div>@trait.Name
						@if(trait.RequiredUpgrade is not null)
						{
							@(" -> " + trait.RequiredUpgrade)
						}
					</div>	
				}
			</div>
		}
		
	</div>



}
